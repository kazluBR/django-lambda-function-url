service: django-lambda

params:
  staging:
    DOCKERFILE: Dockerfile.staging
    VPC:
      securityGroupIds: []
      subnetIds: []
  production:
    DOCKERFILE: Dockerfile.production
    VPC:
      securityGroupIds:
        - ${ssm:/production/vpc/security-group-id, ''}
      subnetIds: ${ssm:/production/vpc/public-subnets, ''}

useDotenv: true

custom:
  prune:
    automatic: true
    number: ${env:VERSION_RETENTION_NUMBER, 3}
  required_envs:
    staging:
      env:
        - DJANGO_SECRET_KEY
        - DJANGO_SUPERUSER_PASSWORD
        - DJANGO_SUPERUSER_EMAIL
        - AWS_S3_BUCKET_DB
        - AWS_S3_ACCESS_KEY
        - AWS_S3_ACCESS_SECRET
    prod:
      env:
        - DJANGO_SECRET_KEY
        - DJANGO_SUPERUSER_PASSWORD
        - DJANGO_SUPERUSER_EMAIL
        - AWS_S3_BUCKET_STORAGE
        - AWS_S3_ACCESS_KEY
        - AWS_S3_ACCESS_SECRET
        - RDS_MYSQL_DB_HOST
        - RDS_MYSQL_DB_NAME
        - RDS_MYSQL_DB_USER
        - RDS_MYSQL_DB_PASSWORD
  dotenv:
    logging: false
    include: []
    required: ${self:custom.required_envs.${self:provider.stage}}
  alerts: ${file(alerts.yml)}

provider:
  name: aws
  region: ${env:REGION, 'us-east-1'}
  stage: ${opt:stage, 'staging'}
  logRetentionInDays: ${env:LOG_RETENTION_DAYS, 7}
  stackTags:
    service: ${self:service}
  ecr:
    images:
      django_lambda:
        path: "."
        file: ${param:DOCKERFILE}
  environment:
    DEBUG: 0
    DJANGO_ALLOWED_HOST: .lambda-url.${self:provider.region}.on.aws

functions:
  - app:
      image: django_lambda
      memorySize: 256
      timeout: 900
      url:
        cors: true
      vpc: ${param:VPC}

package:
  individually: true

plugins:
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  - serverless-plugin-aws-alerts
